!function(c,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("react")):"function"==typeof define&&define.amd?define(["react"],n):"object"==typeof exports?exports.UniversalSearch=n(require("react")):c.UniversalSearch=n(c.react)}(this,function(__WEBPACK_EXTERNAL_MODULE_1__){return function(c){function n(I){if(t[I])return t[I].exports;var g=t[I]={i:I,l:!1,exports:{}};return c[I].call(g.exports,g,g.exports,n),g.l=!0,g.exports}var t={};return n.m=c,n.c=t,n.d=function(c,t,I){n.o(c,t)||Object.defineProperty(c,t,{configurable:!1,enumerable:!0,get:I})},n.n=function(c){var t=c&&c.__esModule?function(){return c.default}:function(){return c};return n.d(t,"a",t),t},n.o=function(c,n){return Object.prototype.hasOwnProperty.call(c,n)},n.p="",n(n.s=0)}([function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = __webpack_require__(1);\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar formattingErr = ' Cannot parse object. Please make sure you\\'re passing in \"listToSearch\" in one of the following formats:\\n\\nPlain Array of Objects (i.e. No Categories):\\n\\n[\\n  { name: \\'foo\\' },\\n  { name: \\'bar\\' },\\n  { name: \\'baz\\' },\\n  ...\\n]\\n\\n---\\n\\nKeyed Objects Containing Arrays:\\n\\n{\\n  foo: [\\n    {name: \\'bar\\'},\\n    ...\\n  ],\\n  baz: [\\n    {name: \\'qux\\'},\\n    ...\\n  ],\\n  ...\\n}\\n';\n\nvar methodWarning = function methodWarning(passedMethod) {\n  return '\\n  Invalid Method: \"' + passedMethod + '\".\\nFalling back to \"greedy\"\\n\\nValid Options are [\\'greedy\\', \\'strict\\', and \\'symbol-permissive\\' ]. If no method is specified, \"greedy\" will automatically be used without showing this warning.\\n';\n};\n\nvar UniversalSearch = function (_React$Component) {\n  _inherits(UniversalSearch, _React$Component);\n\n  function UniversalSearch(props) {\n    _classCallCheck(this, UniversalSearch);\n\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n\n    // this library uses an ES6 Set()\n    // typically, we get O(1) across the board with this data structure\n    var _this = _possibleConstructorReturn(this, (UniversalSearch.__proto__ || Object.getPrototypeOf(UniversalSearch)).call(this, props));\n\n    _this.state = {\n      query: '',\n      results: new Set(),\n      focused: !_this.props.focusedOnly\n    };\n\n    _this.checkForCategories = _this.checkForCategories.bind(_this);\n    _this.inputQuery = _this.inputQuery.bind(_this);\n    _this.filterMatches = _this.filterMatches.bind(_this);\n    _this.renderMatches = _this.renderMatches.bind(_this);\n    _this.renderMatchCount = _this.renderMatchCount.bind(_this);\n    _this.renderIfNoMatches = _this.renderIfNoMatches.bind(_this);\n    _this.focusHandler = _this.focusHandler.bind(_this);\n    return _this;\n  }\n\n  _createClass(UniversalSearch, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      // check if categories were explicitly passed\n      // if not, iterate through the Object keys\n      // and see if category inclusion can be detected from structure\n      this.includeCategories = typeof this.props.hasCategories !== 'undefined' ? this.props.hasCategories : this.checkForCategories(this.props.listToSearch);\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var validParseMethods = ['greedy', 'strict', 'symbol-permissive'];\n      if (this.props.parseMethod && !validParseMethods.includes(this.props.parseMethod)) {\n        console.warn(methodWarning(this.props.parseMethod));\n      }\n\n      if (_typeof(this.props.listToSearch) !== 'object') {\n        console.error(formattingErr);\n      }\n    }\n  }, {\n    key: 'checkForCategories',\n    value: function checkForCategories(listToSearch) {\n      var listKeys = Object.keys(listToSearch);\n      for (var i = 0; i < listKeys.length; i++) {\n        if (Array.isArray(listToSearch[listKeys[i]])) {\n          // short-circuit if following the Object --\x3e Array structure\n          return true;\n        }\n      }\n      // if not, assume regular array\n      return false;\n    }\n  }, {\n    key: 'inputQuery',\n    value: function inputQuery(e) {\n      // escape input and build RE query\n      var input = e.target.value.replace(/[\\.\\+\\*\\?\\^\\$\\[\\]\\{\\}\\(\\)\\|\\/\\\\]/ig, function (sym) {\n        return '\\\\' + sym;\n      });\n      var re = void 0;\n\n      if (this.props.parseMethod === 'strict') {\n        re = input.trim().length > 0 ? new RegExp('^' + input.trim(), 'gi') : '';\n      } else if (this.props.parseMethod === 'symbol-permissive') {\n        re = input.trim().length > 0 ? new RegExp('^([\\\\W\\\\s]+?' + input.trim() + '(\\\\w+)?[\\\\W\\\\s]+?)|^([\\\\W\\\\s]?(\\\\w+)?[\\\\W\\\\s]+)?' + input.trim(), 'ig') : '';\n      } else {\n        re = input.trim().length > 0 ? new RegExp(input.trim(), 'gi') : '';\n      }\n\n      this.setState({\n        query: input\n      });\n\n      if (input) {\n        // use our RE matches to filter on matching strings\n        this.filterMatches(re);\n      } else {\n        // clear all results if search string is empty\n        this.state.results.clear();\n      }\n    }\n  }, {\n    key: 'filterMatches',\n    value: function filterMatches(re) {\n      var _this2 = this;\n\n      var scan = function scan(inputArr, category) {\n        var hasHeader = false;\n        // only applicable if result limit specified\n        var showing = 0;\n        for (var i = 0; i < inputArr.length; i++) {\n          var item = inputArr[i];\n          item._firstInCategory = false;\n          if (item.name.match(re) && re !== '') {\n            // if string matches\n            showing++;\n\n            // delete the item if it exists to re-init order\n            _this2.state.results.delete(item);\n\n            item._category = category;\n            if (!hasHeader) {\n              item._firstInCategory = true;\n              hasHeader = true;\n            }\n            // if a limit was passed in, check if we've exceeded it\n            // if so, bail out\n            if (!_this2.props.limitResults || showing <= _this2.props.limitResults) {\n              _this2.state.results.add(item);\n            }\n          } else {\n            // if string does not match,\n            // strip order-based props\n            if (item._firstInCategory) {\n              item._firstInCategory = false;\n              // this category no longer has a header...\n              // it will be set in the next item\n              hasHeader = false;\n            }\n            _this2.state.results.delete(item);\n          }\n        }\n      };\n\n      if (this.includeCategories) {\n        // if there are categories, iterate through the contents of each one separately\n        Object.keys(this.props.listToSearch).forEach(function (category) {\n          scan(_this2.props.listToSearch[category], category);\n        });\n      } else {\n        // otherwise, simply iterate through a single array\n        scan(this.props.listToSearch);\n      }\n    }\n  }, {\n    key: 'renderMatches',\n    value: function renderMatches(resultsSet) {\n      var _this3 = this;\n\n      // we use a Spread Operator to temporarily transform a Set into an Array\n      // this makes it easier to map into React\n      return [].concat(_toConsumableArray(resultsSet)).map(function (matchingEntry, i) {\n        if (_this3.props.customComponent) {\n          return _this3.props.customComponent(matchingEntry, i);\n        }\n        // default structure if not specified\n        var entry = _react2.default.createElement(\n          'div',\n          {\n            className: 'univ-search-matching-results ' + (matchingEntry._firstInCategory ? 'univ-search-category-head' : ''),\n            key: 'match_' + i\n          },\n          _this3.includeCategories && matchingEntry._firstInCategory ? _react2.default.createElement(\n            'div',\n            {\n              className: 'univ-search-category-head',\n              style: { color: '#aaa', fontStyle: 'italic', fontSize: '12px', margin: '10px 0' }\n            },\n            matchingEntry._category\n          ) : null,\n          matchingEntry.name\n        );\n        return entry;\n      });\n    }\n  }, {\n    key: 'renderMatchCount',\n    value: function renderMatchCount(matchCount) {\n      // optional\n      return this.props.customMatchCountComponent ? this.props.customMatchCountComponent(matchCount) : _react2.default.createElement(\n        'div',\n        { className: 'univ-search-match-count', style: { marginTop: '10px', color: '#aaa' } },\n        matchCount,\n        ' Matches'\n      );\n    }\n  }, {\n    key: 'renderIfNoMatches',\n    value: function renderIfNoMatches(query) {\n      // also optional\n\n      // do not show \"no matches found\" message if no query\n      // may change this to an option later\n      if (!query) {\n        return null;\n      }\n      return this.props.customNoMatchComponent ? this.props.customNoMatchComponent : _react2.default.createElement(\n        'div',\n        { className: 'univ-search-no-matches' },\n        'No Matches...'\n      );\n    }\n  }, {\n    key: 'focusHandler',\n    value: function focusHandler() {\n      if (this.props.focusedOnly) {\n        this.setState({\n          focused: !this.state.focused\n        });\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var matchesFound = this.state.results.size > 0;\n\n      var matchCountComponent = this.props.showMatchCount || this.props.customMatchCountComponent ? this.renderMatchCount(this.state.results.size) : null;\n      var noMatchComponent = this.props.showWhenNoMatches || this.props.customNoMatchComponent ? this.renderIfNoMatches(this.state.query) : null;\n\n      var matchingItemElements = matchesFound ? this.renderMatches(this.state.results) : noMatchComponent;\n\n      var showResults = this.state.query && !this.state.query.match(/^\\s+$/igm) && this.state.focused;\n\n      return _react2.default.createElement(\n        'div',\n        { className: 'univ-search-wrapper' },\n        _react2.default.createElement('input', {\n          placeholder: this.props.placeholder,\n          onChange: this.inputQuery,\n          onFocus: this.focusHandler,\n          onBlur: this.focusHandler\n        }),\n        matchCountComponent,\n        _react2.default.createElement('br', null),\n        _react2.default.createElement('br', null),\n        _react2.default.createElement(\n          'div',\n          {\n            className: 'univ-search-results-wrapper',\n            style: { display: showResults ? 'inherit' : 'none' }\n          },\n          matchingItemElements\n        )\n      );\n    }\n  }]);\n\n  return UniversalSearch;\n}(_react2.default.Component);\n\nexports.default = UniversalSearch;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},function(module,exports){eval("module.exports = __WEBPACK_EXTERNAL_MODULE_1__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9leHRlcm5hbCBcInJlYWN0XCI/M2M2MiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMV9fO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwicmVhY3RcIlxuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n")}])});